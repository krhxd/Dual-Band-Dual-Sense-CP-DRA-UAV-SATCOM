import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error, r2_score
import joblib

# Load dataset
file_path = "combined_s11_data.csv"  # Update with actual path
df = pd.read_csv(file_path)

# Display first few rows
print("Dataset Sample:")
print(df.head())

# Step 1: Preprocessing & Feature Engineering
# Check for missing values
df.dropna(inplace=True)

# Features (X) and Target (Y)
X = df.drop(columns=[col for col in df.columns if "S11_dB" in col])  # Remove all S11 columns to use as features
Y = df[[col for col in df.columns if "S11_dB" in col]]  # Use all S11 columns as targets

# Train-Test Split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Use Polynomial Features to improve extrapolation capabilities
poly = PolynomialFeatures(degree=2, include_bias=False)
scaler = StandardScaler()
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Transform features
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)
X_train_scaled = scaler.fit_transform(X_train_poly)
X_test_scaled = scaler.transform(X_test_poly)

# Train the model
rf_model.fit(X_train_scaled, Y_train)

# Predictions
Y_pred = rf_model.predict(X_test_scaled)

# Ensure both Y_test and Y_pred are 2D arrays
Y_test = np.array(Y_test)
Y_pred = np.array(Y_pred)

# Check for NaN values in predictions
if np.isnan(Y_pred).any():
    print("Warning: NaN values found in predictions!")

# Step 3: Evaluate Model Performance
mse = mean_squared_error(Y_test, Y_pred)
r2 = r2_score(Y_test, Y_pred, multioutput='uniform_average')

print(f"Mean Squared Error: {mse:.4f}")
print(f"R-Squared Score: {r2:.4f}")

# Step 4: Plot Actual vs Predicted Values
plt.figure(figsize=(8, 5))
plt.scatter(Y_test.flatten(), Y_pred.flatten(), color='blue', alpha=0.5)
plt.plot([min(Y_test.flatten()), max(Y_test.flatten())], [min(Y_test.flatten()), max(Y_test.flatten())], '--r')  # Diagonal line
plt.xlabel("Actual S11_dB")
plt.ylabel("Predicted S11_dB")
plt.title("Actual vs Predicted S11 Values")
plt.show()

# Save the trained model
joblib.dump((poly, scaler, rf_model), "s11_rf_model.pkl")
print("Model saved as s11_rf_model.pkl")

# Step 5: Predict S11 for a New Frequency Input (Including Extrapolation)
while True:
    try:
        user_freq = float(input("Enter a frequency (GHz) to predict S11: "))
        user_input = pd.DataFrame([[user_freq] + [0] * (X.shape[1] - 1)], columns=X.columns)  # Ensure proper feature names
        user_input_poly = poly.transform(user_input)
        user_input_scaled = scaler.transform(user_input_poly)
        predicted_s11 = rf_model.predict(user_input_scaled)[0]
        print(f"Predicted S11 values for {user_freq} GHz: {predicted_s11}")
        break
    except ValueError:
        print("Invalid input. Please enter a numeric value.")